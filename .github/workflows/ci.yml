name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Don't test beta on all platforms
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Configure cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run doc tests
      run: cargo test --doc

    - name: Test with all features
      run: cargo test --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      run: cargo audit

    - name: Vulnerability check
      run: cargo audit --deny warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  check-deps:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

    - name: Check for unused dependencies
      run: |
        cargo install cargo-udeps --locked
        cargo +nightly udeps

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      # Add services that integration tests might need
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    - name: Run integration tests
      run: cargo test --test integration_tests

    - name: Test examples
      run: |
        cargo build --examples
        timeout 30s cargo run --example test_agents || true
        timeout 30s cargo run --example test_shell || true

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: |
        # Add when benchmarks are implemented
        # cargo bench --bench agent_performance
        echo "Benchmarks would run here"

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install MSRV
      uses: dtolnay/rust-toolchain@stable
      with:
        # Set to your minimum supported version
        toolchain: 1.70.0

    - name: Check MSRV
      run: cargo check --all-features

  cross-compile:
    name: Cross Compilation Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Configure cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cross compile
      run: cross check --target ${{ matrix.target }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    - name: Check documentation
      run: cargo doc --all-features --no-deps

    - name: Test documentation examples
      run: cargo test --doc

  lint-commits:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate commits
      run: |
        # Simple commit message validation
        # You can expand this with more sophisticated tools
        git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | \
        while read line; do
          if ! echo "$line" | grep -qE '^[a-f0-9]+ (feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+'; then
            echo "Invalid commit message format: $line"
            echo "Expected format: type(scope): description"
            exit 1
          fi
        done

  final:
    name: Final Check
    runs-on: ubuntu-latest
    needs: [test, security, coverage, check-deps, integration, msrv, cross-compile, docs]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" != "success" || 
              "${{ needs.security.result }}" != "success" || 
              "${{ needs.integration.result }}" != "success" || 
              "${{ needs.msrv.result }}" != "success" || 
              "${{ needs.docs.result }}" != "success" ]]; then
          echo "One or more required checks failed"
          exit 1
        fi
        echo "All checks passed!"