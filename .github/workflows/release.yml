name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: devkit ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in this release
            
            <!-- Add release notes here -->
            
            ## Installation
            
            ### Quick Install (Linux/macOS)
            ```bash
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```
            
            ### Manual Installation
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x devkit`
            3. Move to a directory in your PATH: `mv devkit ~/.local/bin/`
            
            ### Cargo Install
            ```bash
            cargo install devkit
            ```
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
            extension: .exe
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Configure cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Build binary (native)
        if: '!matrix.cross'
        run: |
          cargo build --release --target ${{ matrix.target }}
      
      - name: Build binary (cross)
        if: matrix.cross
        run: |
          cross build --release --target ${{ matrix.target }}
      
      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../devkit-${{ matrix.target }}.tar.gz devkit
          cd -
      
      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../devkit-${{ matrix.target }}.zip devkit.exe
          cd -
          
      - name: Generate SHA256 checksums
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile devkit-${{ matrix.target }}.zip SHA256 > devkit-${{ matrix.target }}.zip.sha256
          else
            shasum -a 256 devkit-${{ matrix.target }}.tar.gz > devkit-${{ matrix.target }}.tar.gz.sha256
          fi
        shell: bash
      
      - name: Upload binary archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: devkit-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_name: devkit-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}
          asset_content_type: application/octet-stream
      
      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: devkit-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}.sha256
          asset_name: devkit-${{ matrix.target }}${{ matrix.os == 'windows-latest' && '.zip' || '.tar.gz' }}.sha256
          asset_content_type: text/plain
      
      # Upload raw binary for the install script
      - name: Upload raw binary (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/devkit
          asset_name: devkit-${{ matrix.target }}
          asset_content_type: application/octet-stream
          
      - name: Upload raw binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/devkit.exe
          asset_name: devkit-${{ matrix.target }}.exe
          asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Configure cache
        uses: Swatinem/rust-cache@v2
      
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish
